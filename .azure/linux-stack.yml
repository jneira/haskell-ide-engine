jobs:
- job: Linux_Stack
  timeoutInMinutes: 0
  pool:
    vmImage: ubuntu-16.04
  strategy:
    matrix:
      stack-def:
        YAML_FILE: stack.yaml
      # stack-8.8.3:
      #   YAML_FILE: stack-8.8.3.yaml
      # stack-8.8.2:
      #   YAML_FILE: stack-8.8.2.yaml
      # stack-8.6.5:
      #   YAML_FILE: stack-8.6.5.yaml
      # stack-8.6.4:
      #   YAML_FILE: stack-8.6.4.yaml
      # stack-8.4.4:
      #   YAML_FILE: stack-8.4.4.yaml
      # stack-8.4.3:
      #   YAML_FILE: stack-8.4.3.yaml
      # stack-8.4.2:
      #   YAML_FILE: stack-8.4.2.yaml
  variables:
    STACK_ROOT: /home/vsts/.stack
    CABAL_VERSION: "3.0"
  steps:
  - task: Cache@2
    inputs:
      key: '"stack" | "$(Agent.OS)" | $(Build.SourcesDirectory)/$(YAML_FILE)'
      path: .azure-cache
      cacheHitVar: CACHE_RESTORED
    displayName: "Download cache"
  - bash: |
      mkdir -p $STACK_ROOT
      tar -vxzf .azure-cache/stack-root.tar.gz -C /
      mkdir -p .stack-work
      tar -vxzf .azure-cache/stack-work.tar.gz
    displayName: "Unpack cache"
    condition: eq(variables.CACHE_RESTORED, 'true')
  - bash: |
      git submodule sync
      git submodule update --init
  - bash: |
      mkdir -p ~/.local/bin
      curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | \
        tar vxz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    displayName: Install stack
  - bash: |
      df -h
      source .azure/linux-stack.bashrc
      stack setup --stack-yaml $(YAML_FILE)
      df -h
      ls $(stack path --ghc-paths)
    displayName: Install GHC
  - bash: |
      source .azure/linux-stack.bashrc
      stack  --stack-yaml $(YAML_FILE) --install-ghc build --only-dependencies
    displayName: Build dependencies
  - bash: |
      source .azure/linux-stack.bashrc
      stack build --stack-yaml $(YAML_FILE)
    displayName: Build `hie`
  - bash: |
      source .azure/linux-stack.bashrc
      stack install --stack-yaml $(YAML_FILE) # `hie` binary required locally for tests
      mkdir .azure-deploy
      stack install --stack-yaml $(YAML_FILE) --local-bin-path .azure-deploy
      cd .azure-deploy
      if [ $YAML_FILE != "stack.yaml" ]; then
        GHC_VERSION=${YAML_FILE:6:5}
        GHC_MAJOR_VERSION=${YAML_FILE:6:3}
        cp hie hie-$GHC_VERSION
        cp hie hie-$GHC_MAJOR_VERSION
      else
        GHC_MINOR_VERSION=nightly
      fi
      ARTIFACT_NAME=hie-$(hie --numeric-version)-ghc-$GHC_VERSION-linux-x86_64
      tar -vczf $(Build.ArtifactStagingDirectory)/$ARTIFACT_NAME.tar.xz *
    displayName: Install `hie`
  - bash: |
      source .azure/linux-stack.bashrc
      stack build --stack-yaml $(YAML_FILE) --test --bench --only-dependencies
    displayName: Build Test-dependencies
    condition: False
  - bash: |
      sudo apt update
      sudo apt install z3
    displayName: "Install Runtime Test-Dependencies: z3"
    condition: False
  - bash: |
      source .azure/linux-stack.bashrc
      stack install --resolver=lts-13.20 liquid-fixpoint-0.8.0.2 liquidhaskell-0.8.6.2
    displayName: "Install Runtime Test-Dependencies: liquidhaskell"
    condition: False
  - bash: |
      source .azure/linux-stack.bashrc
      stack build hoogle --stack-yaml=$(YAML_FILE)
      stack exec hoogle generate --stack-yaml=$(YAML_FILE)
    displayName: "Install Runtime Test-Dependencies: hoogle database"
    condition: False
  - bash: |
      source .azure/linux-stack.bashrc
      # cabal is also a test runtime dependency for unit-test suite
      export PATH=/opt/cabal/$CABAL_VERSION/bin:$PATH
      stack test :unit-test --stack-yaml $(YAML_FILE)
    displayName: "Run Test: unit-test"
    condition: False
  - bash: |
      source .azure/linux-stack.bashrc
      stack test :dispatcher-test :plugin-dispatcher-test :wrapper-test --stack-yaml $(YAML_FILE)
    displayName: "Run Test: dispatcher-test, plugin-dispatcher-test and wrapper-test"
    condition: False
  - bash: |
      source .azure/linux-stack.bashrc
      stack test :func-test --stack-yaml $(YAML_FILE)
    displayName: "Run Test: func-test"
    condition: False
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: hie-$(Agent.OS)-$(YAML_FILE)
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues')
    condition: False
  - bash: |
      mkdir -p .azure-cache
      tar -vczf .azure-cache/stack-root.tar.gz $STACK_ROOT
      tar -vczf .azure-cache/stack-work.tar.gz .stack-work
    displayName: "Pack cache"
